/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.locadoradecarros;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author notch0 real
 */
public class frmRemoverCliente extends javax.swing.JFrame {

    /**
     * Creates new form frmCadastrarCliente
     */
    private frmHome frmHomee;

    public frmRemoverCliente(frmHome frmHomee) {
        initComponents();
        this.frmHomee = frmHomee;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpanelCadastroCliente = new javax.swing.JPanel();
        txtNomeCliente = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jpanelBotoes = new javax.swing.JPanel();
        btnConfirmar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jpanelTitulo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Remover cliente");

        jLabel1.setText("Nome:");

        jLabel3.setText("Id:");

        javax.swing.GroupLayout jpanelCadastroClienteLayout = new javax.swing.GroupLayout(jpanelCadastroCliente);
        jpanelCadastroCliente.setLayout(jpanelCadastroClienteLayout);
        jpanelCadastroClienteLayout.setHorizontalGroup(
            jpanelCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelCadastroClienteLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jpanelCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addGap(27, 27, 27)
                .addGroup(jpanelCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(txtId))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpanelCadastroClienteLayout.setVerticalGroup(
            jpanelCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelCadastroClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpanelCadastroClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpanelBotoesLayout = new javax.swing.GroupLayout(jpanelBotoes);
        jpanelBotoes.setLayout(jpanelBotoesLayout);
        jpanelBotoesLayout.setHorizontalGroup(
            jpanelBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpanelBotoesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addGap(61, 61, 61)
                .addComponent(btnConfirmar)
                .addGap(72, 72, 72))
        );
        jpanelBotoesLayout.setVerticalGroup(
            jpanelBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpanelBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelar)
                    .addComponent(btnConfirmar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Pro Heavy", 2, 36)); // NOI18N
        jLabel2.setText("Remover cliente");

        javax.swing.GroupLayout jpanelTituloLayout = new javax.swing.GroupLayout(jpanelTitulo);
        jpanelTitulo.setLayout(jpanelTituloLayout);
        jpanelTituloLayout.setHorizontalGroup(
            jpanelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelTituloLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jpanelTituloLayout.setVerticalGroup(
            jpanelTituloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanelTituloLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpanelCadastroCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpanelBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpanelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpanelTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpanelCadastroCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpanelBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
        frmHomee.setVisible(true);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Deseja remover este cliente?", "Mensagem de confirmacao", JOptionPane.YES_NO_OPTION) == 0) {

            String valorRecebido = txtId.getText();
            int id;

            try {
                id = Integer.parseInt(valorRecebido);

            } catch (NumberFormatException e) {
                id = -1;
                JOptionPane.showMessageDialog(null, "Coloque um valor Id adequado!", "Erro", JOptionPane.ERROR_MESSAGE);
            }

            if (id != -1) {

                if (temLocacao(id) != true) {

                    String nome = txtNomeCliente.getText();

                    if (seExiste(id, nome) == true) {

                        try {
                            Connection conexao = conectarBanco();

                            String sql = "DELETE FROM Cliente WHERE id = ? AND nome = ?";

                            PreparedStatement pstmt = conexao.prepareStatement(sql);

                            pstmt.setInt(1, id);
                            pstmt.setString(2, nome); // posições do String sql

                            pstmt.executeUpdate();
                            pstmt.close();
                            conexao.close();

                            this.dispose();
                            frmHomee.setVisible(true);

                        } catch (SQLException ex) {
                            Logger.getLogger(frmRemoverCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Dados não encontrados!", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRemoverCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmRemoverCliente(new frmHome()).setVisible(true);
            }
        });
    }

    private Connection conectarBanco() throws SQLException {
        String url = "jdbc:mysql://localhost:3306/locadoraDeCarros";
        String usuario = "root";
        String senha = "root";
        return DriverManager.getConnection(url, usuario, senha);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jpanelBotoes;
    private javax.swing.JPanel jpanelCadastroCliente;
    private javax.swing.JPanel jpanelTitulo;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNomeCliente;
    // End of variables declaration//GEN-END:variables

    private boolean seExiste(int id, String nome) {
        try {
            Connection conexao = conectarBanco();

            String sql = "SELECT * FROM cliente WHERE id = ? AND nome = ?";

            PreparedStatement pstmt = conexao.prepareStatement(sql);

            pstmt.setInt(1, id);
            pstmt.setString(2, nome); // posições do String sql

            ResultSet rs = pstmt.executeQuery();

            boolean existe = rs.next(); // se rs.next() retornar true, então existe um registro correspondente

            rs.close();
            pstmt.close();
            conexao.close();

            return existe; // retorna true se o registro existir, false caso contrário

        } catch (SQLException ex) {
            Logger.getLogger(frmRemoverCliente.class.getName()).log(Level.SEVERE, null, ex);
            return false; // retorna false se ocorrer uma exceção
        }
    }

    private boolean temLocacao(int id) {
        try {
            Connection conexao = conectarBanco();

            String sql = "SELECT * FROM Locacao WHERE cliente_id = ?";

            PreparedStatement pstmt = conexao.prepareStatement(sql);

            pstmt.setInt(1, id);

            ResultSet rs = pstmt.executeQuery();

            boolean tem = rs.next(); // se rs.next() retornar true, então existe um registro correspondente

            rs.close();
            pstmt.close();
            conexao.close();

            return tem; // retorna true se o registro existir, false caso contrário

        } catch (SQLException ex) {
            Logger.getLogger(frmRemoverCliente.class.getName()).log(Level.SEVERE, null, ex);
            return false; // retorna false se ocorrer uma exceção
        }
    }

}
